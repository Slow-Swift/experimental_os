import os
import re
import time
from decimal import Decimal
from io import SEEK_CUR, SEEK_SET
from pathlib import Path
from shutil import copy2
import sh

from SCons.Action import Action
from SCons.Builder import Builder
from SCons.Environment import Environment 

from build_scripts.utility import FindIndex, GlobRecursive

SECTOR_SIZE = 512

Import('stage1')
Import('stage2')
Import('kernel')

Import('TARGET_ENVIRONMENT')
TARGET_ENVIRONMENT: Environment
env: Environment = TARGET_ENVIRONMENT

#
# Create an empty file
# target (str): file to create
# size_sectors (int): number of sectors for file. Size will be size_sectors * SECTOR_SIZE
#
def generate_image_file(target, size_sectors):
    with open(target, 'wb') as fout:
        fout.write(bytes(size_sectors * SECTOR_SIZE))
        fout.close()


#
# Create a filesystem on a disk / image
# target (str): The disk / image to create the filesystem on
# filesystem (str): The filesystem to create        
# reserved_sectors (int): The number of reserved sectors to allocate
# offset (int): The offset into the disk / image in sectors to begin creating the filesystem
#
def create_filesystem(target, filesystem, reserved_sectors=0, offset=0):
    if filesystem == 'fat32':
        reserved_sectors += 2
    
        #! Should almost certainly include the blocksize so that the mkfs.fat does not think
        #! it has access to more space than it does
        mkfs_fat = sh.Command('mkfs.fat')
        mkfs_fat(
            target, 
            F='32', 
            n='EFI System', 
            R=reserved_sectors, 
            offset=offset)
    else:
        raise ValueError(f'Unsupported filesystem: {filesystem}')

def find_symbol_in_map_file(map_file, symbol):
    with map_file.open('r') as fmap:
        for line in fmap:
            if symbol in line:
                match = re.search('0x([0-9a-fA-F]+)', line)
                if match is not None:
                    return int(match.group(1), base=16)
    return None

def install_stage1(target, stage1, offset=0):
    map_file = Path(stage1).with_suffix('.map')
    if not map_file.exists():
        raise ValueError("Can't find {map_file}")
    
    entry_offset = find_symbol_in_map_file(map_file, '__entry_start')
    if entry_offset is None:
        raise ValueError("Can't find __entry_start symbol in map file " + map_file)
    entry_offset -= 0x7C00

    with open(stage1, 'rb') as fstage1:
        with os.fdopen(os.open(target, os.O_WRONLY | os.O_CREAT), 'wb+') as ftarget:
            ftarget.seek(offset * SECTOR_SIZE, SEEK_SET)

            ftarget.write(fstage1.read(446))

            ftarget.seek(offset * SECTOR_SIZE + 509, SEEK_SET)
            fstage1.seek(509, SEEK_SET)
            ftarget.write(fstage1.read(2))

def install_stage2(target, stage2, offset=0, limit=None):
    with open(stage2, 'rb') as fstage2:
        with os.fdopen(os.open(target, os.O_WRONLY | os.O_CREAT), 'wb+') as ftarget:
            ftarget.seek(offset * SECTOR_SIZE, SEEK_SET)
            ftarget.write(fstage2.read())

def create_partition_table(target, align_start):
    # Format the file as GPT
    sh.parted(target, "mklabel", "gpt")

    # Create a partition
    sh.parted(target, "mkpart", "primary", "fat32", f"{align_start}s", "100%")

    #? Not sure if this actually needs to be bootable
    # Make the partition bootable
    sh.parted(target, "set", "1", "esp", "on")

def mount_fs(image: str, mount_dir: str):
    sh.guestmount(mount_dir, add=image, mount='/dev/sda1')

def unmount_fs(mount_dir: str):
    time.sleep(3)
    sh.fusermount(u=mount_dir)

def build_disk(image, stage1, stage2, kernel, files, env):
    # Round the image size up to the number of sectors
    size_sectors = (env['imageSize'] + SECTOR_SIZE - 1) // SECTOR_SIZE
    filesystem = env['imageFS']
    partition_offset = 2048     # We will use 1 MiB as the partition offset since that is recommended for best alignment

    # Determine the size of stage1 and stage2
    stage1_size = os.stat(stage1).st_size
    stage2_size = os.stat(stage2).st_size

    # Determine the size of stage2 in sectors
    stage2_sectors = (stage2_size + SECTOR_SIZE - 1) // SECTOR_SIZE

    # Create an empty image file
    print("> creating image file")
    generate_image_file(image, size_sectors)

    # Create the partition table
    print(f"> creating partition table...")
    create_partition_table(image, partition_offset)

    # Create the filesystem
    print(f"> formatting file using {filesystem}...")
    create_filesystem(image, filesystem, offset=partition_offset)

    # Install stage1
    print(f"> installing stage1...")
    install_stage1(image, stage1, offset=0)

    # Install stage2 at offset 34 since that is the first free sector
    print(f"> installing stage2...")
    install_stage2(image, stage2, offset=34, limit=partition_offset)

    # Determine the path to mount the image at
    tempdir_name = 'tmp_mount_{0}'.format(int(time.time()))
    tempdir = os.path.join(os.path.dirname(image), tempdir_name)
    try:
        os.mkdir(tempdir)

        # Mount the image
        print(f"> mounting image to {tempdir}...")
        mount_fs(image, tempdir)

        # Copy kernel
        print(f"> copying kernel...")
        bootdir = os.path.join(tempdir, 'boot')
        os.makedirs(bootdir)
        copy2(kernel, bootdir)

        # Copy files into the filesystem
        src_root = env['BASEDIR']
        print(f"> copying files...")
        for file in files:
            file_src = file.srcnode().path
            file_rel = os.path.relpath(file_src, src_root)
            file_dst = os.path.join(tempdir, file_rel)

            if os.path.isdir(file_src):
                print('    ... creating directory', file_rel)
                os.makedirs(file_dst)
            else:
                print('    ... copying', file_rel)
                copy2(file_src, file_dst)
    finally:
        print("> cleaning up...")
        # Unmount the image
        try:
            unmount_fs(tempdir)
        except:
            pass
        os.rmdir(tempdir)

def build_image(target, source, env):
    stage1 = str(source[0])
    stage2 = str(source[1])
    kernel = str(source[2])
    files = source[3:]

    build_disk(str(target[0]), stage1, stage2, kernel, files, env)

# Collect the files in the root directory
root = env.Dir('root')
root_content = GlobRecursive(env, '*', root)

inputs = [stage1, stage2, kernel] + root_content

output_fmt = 'img'
output = f'image.{output_fmt}'

# Build the image
image = env.Command(output, inputs,
                    action=Action(build_image, 'Creating disk image...'),
                    BASEDIR=root.srcnode().path)

env.Depends(image, inputs)

# Export the resulting image
Export('image')

